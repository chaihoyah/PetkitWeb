{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chaih\\\\Desktop\\\\petkitweb\\\\src\\\\pages\\\\components\\\\custom-selectcheck.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Dropdown, Image } from \"react-bootstrap\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CustomSelectCheck(props) {\n  _s();\n\n  const options = props.options;\n  const [value, setValue] = props.value;\n  const [isOpened, setIsOpened] = useState(false);\n  const [mainText, setMainText] = useState(\"text-neor text-small text-silvergray\");\n  const [mainTextStyle, setMainTextStyle] = useState();\n\n  function set(str) {\n    if (parseInt(str) === parseInt(value)) {\n      setValue(\"0\");\n      setMainText(props.placeholder);\n    } else {\n      setValue(str);\n      setMainText(options[parseInt(str) - 1].label);\n    }\n  }\n\n  function setStyle(idx) {\n    if (parseInt(value) - 1 === idx) return \"large dropdown-checkselected\";else return \"large\";\n  }\n\n  function textStyle() {\n    if (parseInt(value) === 0) return \"text-neor text-small text-silvergray\";else return \"text-neor text-small text-black\";\n  }\n\n  useEffect(() => {\n    setMainText(props.placeholder);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isOpened && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100vw\",\n        height: \"100vh\",\n        position: \"fixed\",\n        zIndex: \"1\",\n        left: \"0\",\n        top: \"0\"\n      },\n      onClick: () => {\n        setIsOpened(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdownlarge-wrap\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"default\",\n        className: textStyle(),\n        onClick: () => {\n          setIsOpened(!isOpened);\n        },\n        children: mainText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this), isOpened && /*#__PURE__*/_jsxDEV(Dropdown, {\n        className: \"large\",\n        children: options.map((state, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            className: setStyle(index),\n            onClick: () => {\n              set(state.value);\n            },\n            children: \"ㆍ\" + state.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 21\n          }, this), parseInt(value) - 1 === index && /*#__PURE__*/_jsxDEV(Image, {\n            src: \"images/check-icon.svg\",\n            className: \"check-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 54\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CustomSelectCheck, \"YXlvsfxZsswjJccXZxkVSmUFMzU=\");\n\n_c = CustomSelectCheck;\nexport default CustomSelectCheck;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomSelectCheck\");","map":{"version":3,"sources":["C:/Users/chaih/Desktop/petkitweb/src/pages/components/custom-selectcheck.js"],"names":["Button","Dropdown","Image","useState","useEffect","CustomSelectCheck","props","options","value","setValue","isOpened","setIsOpened","mainText","setMainText","mainTextStyle","setMainTextStyle","set","str","parseInt","placeholder","label","setStyle","idx","textStyle","width","height","position","zIndex","left","top","map","state","index","display"],"mappings":"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","sourcesContent":["import { Button, Dropdown, Image } from \"react-bootstrap\";\r\nimport { useState, useEffect} from \"react\";\r\n\r\nfunction CustomSelectCheck(props) {\r\n  const options = props.options;\r\n  const [value, setValue] = props.value;\r\n  const [isOpened, setIsOpened] = useState(false);\r\n  const [mainText, setMainText] = useState(\"text-neor text-small text-silvergray\");\r\n  const [mainTextStyle, setMainTextStyle] = useState()\r\n\r\n  function set(str){\r\n    if(parseInt(str) === parseInt(value)){\r\n        setValue(\"0\");\r\n        setMainText(props.placeholder);\r\n    }\r\n    else{\r\n        setValue(str);\r\n        setMainText(options[parseInt(str)-1].label);\r\n    }\r\n  }\r\n\r\n  function setStyle(idx){\r\n    if(parseInt(value)-1 === idx) return \"large dropdown-checkselected\";\r\n    else return \"large\";\r\n  }\r\n\r\n  function textStyle(){\r\n    if(parseInt(value) === 0) return \"text-neor text-small text-silvergray\";\r\n    else return \"text-neor text-small text-black\";\r\n  }\r\n\r\n  useEffect(() => {\r\n    setMainText(props.placeholder);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n    { isOpened &&\r\n    <div style={{width:\"100vw\", height:\"100vh\", position:\"fixed\", zIndex:\"1\", left: \"0\", top: \"0\"}} onClick={() => {setIsOpened(false)}}>\r\n    </div>\r\n    }\r\n    <div className=\"dropdownlarge-wrap\">\r\n      <Button variant=\"default\" className={textStyle()} onClick={() => {setIsOpened(!isOpened)}}>{mainText}</Button>\r\n      {(isOpened) &&\r\n        <Dropdown className=\"large\">\r\n            {options.map((state, index) => (\r\n                <div key={index} style={{display:\"flex\"}}>\r\n                    <Dropdown.Item className={setStyle(index)} onClick={() => {set(state.value);}}>\r\n                        {\"ㆍ\"+state.label}\r\n                    </Dropdown.Item>\r\n                    { parseInt(value)-1 === index && <Image src=\"images/check-icon.svg\" className=\"check-icon\"/>}\r\n                </div>\r\n            ))}\r\n        </Dropdown>\r\n      }\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CustomSelectCheck;"]},"metadata":{},"sourceType":"module"}