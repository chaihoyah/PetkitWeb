{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chaih\\\\Desktop\\\\petkitweb\\\\src\\\\pages\\\\components\\\\custom-selectcheck.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Dropdown } from \"react-bootstrap\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CustomSelectCheck(props) {\n  _s();\n\n  const options = props.options;\n  const [value, setValue] = props.value;\n  const [isOpened, setIsOpened] = useState(false);\n  const [mainText, setMainText] = useState(props.placeholder);\n  console.log(props.placeholder);\n  const strActiveStar = [];\n  const strUnactiveStar = [];\n\n  if (props.size === \"sm\") {\n    var size = \"small\";\n    var wrap = \"dropdownsmall-wrap\";\n    var textalign = \"center\";\n  } else if (props.size === \"lg\") {\n    var size = \"large\";\n    var wrap = \"dropdownlarge-wrap\";\n  }\n\n  function set(str) {\n    setValue(str);\n    if (!localStorage.getItem(\"session_token\") && props.type === \"sort\") localStorage.setItem(\"sort\", str);\n  }\n\n  function setStyle(idx) {\n    if (parseInt(value) - 1 === idx) return \"dropdown-selected\";\n    return \"dropdown-normal\";\n  }\n\n  useEffect(() => {\n    setMainText(options[parseInt(value) - 1].label);\n  }, [value]);\n  useEffect(() => {\n    if (props.placeholder) setMainText(props.placeholder);else setMainText(options[parseInt(value) - 1].label);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isOpened && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100vw\",\n        height: \"100vh\",\n        position: \"fixed\",\n        zIndex: \"1\",\n        left: \"0\",\n        top: \"0\"\n      },\n      onClick: () => {\n        setIsOpened(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: wrap,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"default\",\n        className: \"text-neor text-small text-black\",\n        onClick: () => {\n          setIsOpened(!isOpened);\n        },\n        children: mainText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), isOpened && /*#__PURE__*/_jsxDEV(Dropdown, {\n        className: size,\n        children: options.map((state, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            className: setStyle(index),\n            style: {\n              justifyContent: props.textalign\n            },\n            onClick: () => {\n              set(state.value);\n            },\n            children: state.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 21\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CustomSelectCheck, \"SY5QjA9yKOFnt6oXiAPz3UcrWbQ=\");\n\n_c = CustomSelectCheck;\nexport default CustomSelectCheck;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomSelectCheck\");","map":{"version":3,"sources":["C:/Users/chaih/Desktop/petkitweb/src/pages/components/custom-selectcheck.js"],"names":["Button","Dropdown","useState","useEffect","CustomSelectCheck","props","options","value","setValue","isOpened","setIsOpened","mainText","setMainText","placeholder","console","log","strActiveStar","strUnactiveStar","size","wrap","textalign","set","str","localStorage","getItem","type","setItem","setStyle","idx","parseInt","label","width","height","position","zIndex","left","top","map","state","index","justifyContent"],"mappings":"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","sourcesContent":["import { Button, Dropdown } from \"react-bootstrap\";\r\nimport { useState, useEffect} from \"react\";\r\n\r\nfunction CustomSelectCheck(props) {\r\n  const options = props.options;\r\n  const [value, setValue] = props.value;\r\n  const [isOpened, setIsOpened] = useState(false);\r\n  const [mainText, setMainText] = useState(props.placeholder);\r\n  console.log(props.placeholder);\r\n  const strActiveStar = [];\r\n  const strUnactiveStar = [];\r\n\r\n  if(props.size===\"sm\") {\r\n    var size=\"small\";\r\n    var wrap=\"dropdownsmall-wrap\";\r\n    var textalign=\"center\";\r\n  }\r\n  else if(props.size===\"lg\") {\r\n    var size=\"large\";\r\n    var wrap=\"dropdownlarge-wrap\";\r\n  }\r\n\r\n  function set(str){\r\n    setValue(str);\r\n    if(!localStorage.getItem(\"session_token\") && props.type === \"sort\") localStorage.setItem(\"sort\", str);\r\n  }\r\n\r\n  function setStyle(idx){\r\n    if(parseInt(value)-1 === idx) return \"dropdown-selected\";\r\n    return \"dropdown-normal\";\r\n  }\r\n  useEffect(() => {\r\n    setMainText(options[parseInt(value)-1].label);\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    if(props.placeholder) setMainText(props.placeholder);\r\n    else setMainText(options[parseInt(value)-1].label);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n    { isOpened &&\r\n    <div style={{width:\"100vw\", height:\"100vh\", position:\"fixed\", zIndex:\"1\", left: \"0\", top: \"0\"}} onClick={() => {setIsOpened(false)}}>\r\n    </div>\r\n    }\r\n    <div className={wrap}>\r\n      <Button variant=\"default\" className=\"text-neor text-small text-black\"onClick={() => {setIsOpened(!isOpened)}}>{mainText}</Button>\r\n      {(isOpened) &&\r\n        <Dropdown className={size}>\r\n            {options.map((state, index) => (\r\n                <div key={index}>\r\n                    <Dropdown.Item className={setStyle(index)} style={{justifyContent:props.textalign}} onClick={() => {set(state.value);}}>\r\n                        {state.label}\r\n                    </Dropdown.Item>\r\n                </div>\r\n            ))}\r\n        </Dropdown>\r\n      }\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CustomSelectCheck;"]},"metadata":{},"sourceType":"module"}